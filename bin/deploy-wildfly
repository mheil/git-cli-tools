#!/bin/bash
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "deploys list of paths on wildfly and prints deployment-info
usage:
  deploy <path1> <path2> <pathN>

In case the provided path is a file, the file itself will be deployed. In case the provided path is a directory, all
jars inside the directory (non-recursive) will be deployed. To speed up deployment of multiple files, all paths will be
collected together and will be deployed using a single deploy operation.

JBOSS_HOME has to set to the installation directory of the wildfly used for deployment. The scripts auto-detects
whether the wildfly is currently running or has to be embedded for deployment.

Any deployments already that are already deployed in wildfly will be replaced by the new deployment.
"
exit 0
fi

if [ "$JBOSS_HOME" = "" ]; then
   echo "JBOSS_HOME not set!"
   exit 1
fi

JBOSS_CLI="$JBOSS_HOME/bin/jboss-cli.sh "

BATCH=""
function queue {
    BATCH="${BATCH}
$1"
}

PID_OF_WILDFLY="$(ps aux | grep $JBOSS_HOME | grep -v grep | awk '{print $2}')"
if [ "$PID_OF_WILDFLY" = "" ]; then
    echo "wildfly not running, embedding default wildfly"
    queue "embed-server"
else
    echo "found running wildfly with pid: $PID_OF_WILDFLY"
    queue "connect"
fi

for f in "$@"
do
    if [ -f "$f" ]; then
        queue "deploy --force $f"
    elif [ -d "$f" ]; then
          for f2 in $f/*.jar
          do
              queue "deploy --force $f2"
          done
    else
        echo "path not found $f"
    fi
done

queue "deployment-info"

$JBOSS_CLI << EOF
$BATCH
EOF
